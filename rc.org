#+title: Emacs Configuration
#+author: sndb

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

#+end_src

* Packages

** MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
#+end_src

** use-package

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Files

** Custom file

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file)
#+end_src

** Temporary files

#+begin_src emacs-lisp
  (setq create-lockfiles nil
        make-backup-files nil
        auto-save-default nil)
#+end_src

** Recently edited files

#+begin_src emacs-lisp
  (recentf-mode)
#+end_src

** Save place

#+begin_src emacs-lisp
  (setq save-place-limit 128)
  (save-place-mode)
#+end_src

** Auto revert

#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (global-auto-revert-mode)
#+end_src

* General

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil
        scroll-conservatively 101
        indent-tabs-mode nil
        inhibit-startup-screen t
        split-width-threshold 80)
#+end_src

* Visuals

** Basics

#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (global-hl-line-mode)

  (use-package visual-fill-column
    :init
    (add-hook 'visual-line-mode-hook #'visual-fill-column-mode))
#+end_src

** Modeline

#+begin_src emacs-lisp
  (setq display-time-default-load-average nil)
  (line-number-mode)
  (column-number-mode)
  (size-indication-mode)
#+end_src

** Frame

#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)

  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "Hack" :height 110)
  (set-face-attribute 'fixed-pitch nil :family "Hack" :height 1.0)
  (set-face-attribute 'variable-pitch nil :family "Liberation Serif" :height 160)
#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package modus-themes
    :init
    (setq modus-themes-region '(bg-only no-extend)
          modus-themes-syntax '(yellow-comments)
          modus-themes-hl-line '(accented)
          modus-themes-italic-constructs t
          modus-themes-mode-line '(accented borderless)
          modus-themes-headings '((t . (rainbow))))
    (modus-themes-load-themes)
    :config
    (modus-themes-load-vivendi)
    :bind ("<f5>" . modus-themes-toggle))
#+end_src

* Keyboard

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (setq which-key-idle-delay 0.25)
    :config
    (which-key-mode))

  (use-package aggressive-indent
    :init
    (global-aggressive-indent-mode))
#+end_src

* Org

#+begin_src emacs-lisp
  (setq org-startup-indented t)
  (add-hook 'org-mode-hook #'visual-line-mode)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)))

  (setq org-confirm-babel-evaluate nil)
#+end_src

* Completion

#+begin_src emacs-lisp
  (setq history-length 32)
  (savehist-mode)

  (use-package vertico
    :init
    (vertico-mode))

  (use-package orderless
    :custom
    (orderless-matching-styles '(orderless-flex))
    (completion-styles '(orderless)))

  (use-package marginalia
    :init
    (marginalia-mode))

  (use-package corfu
    :custom
    (corfu-auto t)
    :init
    (corfu-global-mode))

  (defun corfu-enable-always-in-minibuffer ()
    (unless (bound-and-true-p vertico--input)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
#+end_src

* Applications

** Terminal

#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** Readers

*** PDF

#+begin_src emacs-lisp
  (use-package pdf-tools
    :init
    (pdf-tools-install))
#+end_src

*** Epub

#+begin_src emacs-lisp
  (use-package nov
    :custom
    (nov-text-width 80)
    :init
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

* Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c r") 'recentf-open-files)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c w") 'delete-trailing-whitespace)
#+end_src
