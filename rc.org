#+title: GNU Emacs Configuration
#+author: sndb
#+email: sndb@sndb.xyz

* Basics

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t -*-
#+end_src

** Packages

*** MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
#+end_src

*** Package list

#+begin_src emacs-lisp
  (setq sndb-package-list
        '(;; completion
          avy
          consult
          corfu
          embark
          embark-consult
          marginalia
          orderless
          vertico
          wgrep

          ;; languages
          eglot
          go-mode
          racket-mode
          rust-mode

          ;; applications
          elfeed
          emms
          magit
          magit-todos
          nov
          password-store
          pdf-tools
          vterm

          ;; miscellaneous
          circadian
          diff-hl
          hl-todo
          modus-themes))

  (defun sndb-install-packages ()
    "Install all the packages from `sndb-package-list'."
    (interactive)
    (package-refresh-contents)
    (dolist (package sndb-package-list)
      (unless (package-installed-p package)
        (package-install package))))
#+end_src

** Server

#+begin_src emacs-lisp
  (require 'server)
  (server-start)
#+end_src

** Files

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (when (file-exists-p custom-file)
    (load-file custom-file))

  (setq sndb-private-file (locate-user-emacs-file "private.el"))
  (when (file-exists-p sndb-private-file)
    (load-file sndb-private-file))
#+end_src

** Recursion resources

#+begin_src emacs-lisp
  (setq max-specpdl-size (* 10 max-specpdl-size))
  (setq max-lisp-eval-depth (* 10 max-lisp-eval-depth))
#+end_src

* History

** Backups

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backup/"))))
  (setq backup-by-copying t)
  (setq version-control t)
  (setq delete-old-versions t)
  (setq kept-new-versions 4)
  (setq create-lockfiles nil)
  (setq auto-save-default nil)
#+end_src

** Recent files

#+begin_src emacs-lisp
  (require 'recentf)

  (setq recentf-max-saved-items 256)
  (setq recentf-exclude
        '(;; tramp
          "^/ssh:"
          "^/sudo:"

          ;; images
          "\\.jpe?g$"
          "\\.png$"
          "\\.gif$"
          "\\.webp$"

          ;; archives
          "\\.zip$"
          "\\.gz$"
          "\\.xz$"
          "\\.zst$"))

  (recentf-mode 1)
#+end_src

** Save place

#+begin_src emacs-lisp
  (require 'saveplace)
  (setq save-place-limit 256)
  (save-place-mode 1)
#+end_src

** Window configuration

#+begin_src emacs-lisp
  (require 'winner)
  (winner-mode 1)
#+end_src

** Minibuffer

#+begin_src emacs-lisp
  (require 'savehist)
  (setq history-length 1024)
  (savehist-mode 1)
#+end_src

* Interface

** Indicators

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq use-short-answers t)
  (setq echo-keystrokes 0.25)
  (setq show-paren-delay 0.1)
  (setq display-time-day-and-date t)
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average nil)
  (setq mode-line-compact 'long)
  (setq visible-bell t)
  (setq-default indicate-empty-lines t)

  (show-paren-mode 1)
  (blink-cursor-mode -1)
  (display-time-mode -1)
  (line-number-mode 1)
  (column-number-mode 1)
  (size-indication-mode -1)

  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'hl-line-mode)
#+end_src

** Highlight keywords

#+begin_src emacs-lisp
  (require 'hl-todo)
  (global-hl-todo-mode 1)
#+end_src

** Windows and frame

#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
  (setq window-resize-pixelwise t)
  (setq window-combination-resize t)
  ;; if buffer-file-name is non-nil, use buffer name and file name as a
  ;; frame title; otherwise, use buffer name and default-directory
  (setq frame-title-format
        '(buffer-file-name "%b - %f" ("%b - " default-directory)))

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
#+end_src

** Buffers

#+begin_src emacs-lisp
  (setq view-read-only t)

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+end_src

** Tabs

#+begin_src emacs-lisp
  (require 'tab-bar)
  (setq tab-bar-close-button-show nil)
  (setq tab-bar-new-button-show nil)
#+end_src

** Clipboard

#+begin_src emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (setq text-scale-mode-step 1.1)

  (setq sndb-favorite-mono-fonts
        '("Source Code Pro-10.5"
          "Hack-10.5"
          "Fira Mono-10.5"))
  (setq sndb-mono-font (cadr sndb-favorite-mono-fonts))
  (setq sndb-sans-font "Source Sans Pro-12")

  (set-face-attribute 'default nil :font sndb-mono-font)
  (set-face-attribute 'fixed-pitch nil :font sndb-mono-font)
  (set-face-attribute 'variable-pitch nil :font sndb-sans-font)

  (defun sndb-rotate-fonts ()
    "Rotates the list of favorite monospaced fonts."
    (interactive)
    (let ((next (car sndb-favorite-mono-fonts)))
      (setq sndb-favorite-mono-fonts
            (append (cdr sndb-favorite-mono-fonts)
                    (list next)))
      (set-face-attribute 'default nil :font next)
      (set-face-attribute 'fixed-pitch nil :font next)
      (message "Font: %s" next)))
#+end_src

** Theme

#+begin_src emacs-lisp
  (require 'modus-themes)
  (setq modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-syntax '(yellow-comments green-strings)
        modus-themes-mixed-fonts t
        modus-themes-prompts '(bold)
        modus-themes-mode-line '(accented borderless)
        modus-themes-paren-match '(bold intense)
        modus-themes-region '(accented bg-only)
        modus-themes-org-blocks 'gray-background
        modus-themes-headings '((t . (background)))
        modus-themes-fringes 'subtle)
  (modus-themes-load-themes)

  (require 'circadian)
  (setq calendar-latitude 55)
  (setq calendar-longitude 37)
  (setq circadian-themes '((:sunrise . modus-operandi) (:sunset  . modus-vivendi)))
  (circadian-setup)
#+end_src

* Editing

** Languages

*** C

#+begin_src emacs-lisp
  (setq c-default-style "linux")
  (add-hook 'c-mode-common-hook #'indent-tabs-mode)
#+end_src

*** Go

#+begin_src emacs-lisp
  (add-hook 'go-mode-hook (lambda () (setq fill-column 80)))
#+end_src

** Parens

#+begin_src emacs-lisp
  (require 'elec-pair)
  (electric-pair-mode 1)
#+end_src

** Scrolling

#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position t)
  (setq scroll-conservatively 1)

  (defun sndb-half-screen ()
    "Return the half of the selected window's height."
    (/ (window-body-height) 2))

  (defun sndb-scroll-half-screen-up ()
    "Scroll half screen up."
    (interactive)
    (scroll-up (sndb-half-screen)))

  (defun sndb-scroll-half-screen-down ()
    "Scroll half screen down."
    (interactive)
    (scroll-down (sndb-half-screen)))

  (global-set-key (kbd "C-S-n") #'sndb-scroll-half-screen-up)
  (global-set-key (kbd "C-S-p") #'sndb-scroll-half-screen-down)
#+end_src

** Format

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
  (setq tab-always-indent 'complete)
  (setq tab-first-completion 'word-or-paren-or-punct)
  (setq-default indent-tabs-mode nil)
  (setq require-final-newline t)

  (defun sndb-format-buffer ()
    "Apply `indent-region' to the whole buffer.
  If Eglot is active, format the buffer and organize imports."
    (interactive)
    (if eglot--managed-mode
        (progn
          (eglot-format)
          (eglot-code-action-organize-imports (point-min) (point-max)))
      (indent-region (point-min) (point-max)))
    (delete-trailing-whitespace))

  (defun sndb-replace-untypable-characters ()
    "Replace the characters that are inconvenient to type."
    (interactive)
    (save-excursion
      (dolist (pair
               '(("‘" . "'")
                 ("’" . "'")
                 ("“" . "\"")
                 ("”" . "\"")
                 ("—" . " - ")))
        (replace-string (car pair) (cdr pair) nil (point-min) (point-max)))))

  (global-set-key (kbd "M-SPC") #'cycle-spacing)
  (global-set-key (kbd "C-c w") #'whitespace-mode)
  (global-set-key (kbd "C-c W") #'delete-trailing-whitespace)
  (global-set-key (kbd "C-c f") #'sndb-format-buffer)
  (global-set-key (kbd "C-c t") #'indent-tabs-mode)
#+end_src

** Auto-Revert

#+begin_src emacs-lisp
  (require 'autorevert)
  (global-auto-revert-mode 1)
#+end_src

** Better defaults

#+begin_src emacs-lisp
  (global-set-key [remap list-buffers] #'ibuffer)
  (global-set-key [remap zap-to-char] #'zap-up-to-char)
  (global-set-key [remap upcase-word] #'upcase-dwim)
  (global-set-key [remap downcase-word] #'downcase-dwim)
  (global-set-key [remap capitalize-word] #'capitalize-dwim)
#+end_src

** Scratch buffer

#+begin_src emacs-lisp
  (defun sndb-scratch-buffer ()
    "Switch to the *scratch* buffer."
    (interactive)
    (pop-to-buffer "*scratch*"))

  (global-set-key (kbd "C-c s") #'sndb-scratch-buffer)
#+end_src

* Completion

** Abbrevs

#+begin_src emacs-lisp
  (require 'abbrev)
  (require 'dabbrev)
  (require 'hippie-exp)

  (setq abbrev-file-name (locate-user-emacs-file "abbrevs.el"))
  (setq abbrev-suggest t)
  (setq dabbrev-case-fold-search nil)

  (dolist (hook '(text-mode-hook prog-mode-hook))
    (add-hook hook #'abbrev-mode))

  (global-set-key [remap dabbrev-expand] #'hippie-expand)
#+end_src

** Ignore case

#+begin_src emacs-lisp
  (setq completion-ignore-case t)
  (setq read-buffer-completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
#+end_src

** ElDoc

#+begin_src emacs-lisp
  (require 'eldoc)
  (setq eldoc-echo-area-prefer-doc-buffer t)
  (setq eldoc-idle-delay 0.1)
#+end_src

** Vertico

#+begin_src emacs-lisp
  (require 'vertico)
  (setq vertico-cycle t)
  (setq vertico-count 20)
  (vertico-mode 1)
#+end_src

** Orderless

#+begin_src emacs-lisp
  (require 'orderless)

  (setq completion-styles '(orderless basic))
  (setq completion-category-overrides '((file (styles basic partial-completion))))
  (setq orderless-matching-styles '(orderless-flex orderless-regexp))
  (setq orderless-style-dispatchers
        '(sndb-orderless-literal-dispatcher
          sndb-orderless-initialism-dispatcher))

  (defun sndb-orderless-literal-dispatcher (pattern _index _total)
    "Match component as literal if it ends in =."
    (when (string-suffix-p "=" pattern)
      `(orderless-literal . ,(substring pattern 0 -1))))

  (defun sndb-orderless-initialism-dispatcher (pattern _index _total)
    "Match component as initialism if it ends in ,."
    (when (string-suffix-p "," pattern)
      `(orderless-initialism . ,(substring pattern 0 -1))))
#+end_src

** Marginalia

#+begin_src emacs-lisp
  (require 'marginalia)
  (marginalia-mode 1)
  (global-set-key (kbd "M-A") #'marginalia-cycle)
#+end_src

** Consult

#+begin_src emacs-lisp
  (require 'consult)

  (setq consult-preview-key '(:debounce 0.5 any))
  (setq register-preview-delay 0.5)
  (setq register-preview-function #'consult-register-format)

  ;; remap
  (global-set-key [remap switch-to-buffer] #'consult-buffer)
  (global-set-key [remap switch-to-buffer-other-window] #'consult-buffer-other-window)
  (global-set-key [remap switch-to-buffer-other-frame] #'consult-buffer-other-frame)
  (global-set-key [remap project-switch-to-buffer] #'consult-project-buffer)
  (global-set-key [remap bookmark-jump] #'consult-bookmark)
  (global-set-key [remap goto-line] #'consult-goto-line)
  (global-set-key [remap yank-pop] #'consult-yank-pop)

  ;; search-map
  (global-set-key (kbd "M-s d") #'consult-find)
  (global-set-key (kbd "M-s D") #'consult-locate)
  (global-set-key (kbd "M-s l") #'consult-line)
  (global-set-key (kbd "M-s L") #'consult-line-multi)
  (global-set-key (kbd "M-s g") #'consult-grep)
  (global-set-key (kbd "M-s G") #'consult-git-grep)
  (global-set-key (kbd "M-s r") #'consult-ripgrep)

  ;; goto-map
  (global-set-key (kbd "M-g i") #'consult-imenu)
  (global-set-key (kbd "M-g I") #'consult-imenu-multi)
  (global-set-key (kbd "M-g e") #'consult-compile-error)
  (global-set-key (kbd "M-g f") #'consult-flymake)
  (global-set-key (kbd "M-g o") #'consult-outline)
  (global-set-key (kbd "M-g m") #'consult-mark)

  ;; register
  (global-set-key (kbd "C-M-#") #'consult-register)
  (global-set-key (kbd "M-#") #'consult-register-load)
  (global-set-key (kbd "M-'") #'consult-register-store)
#+end_src

** Embark

#+begin_src emacs-lisp
  (require 'embark)
  (require 'embark-consult)
  (require 'wgrep)

  (setq prefix-help-command #'embark-prefix-help-command)
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode)

  (global-set-key (kbd "C-.") #'embark-act)
  (global-set-key (kbd "M-.") #'embark-dwim)
  (global-set-key (kbd "C-h B") #'embark-bindings)
#+end_src

** Corfu

#+begin_src emacs-lisp
  (require 'corfu)
  (setq corfu-cycle t)
  (global-corfu-mode 1)

  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico is not active."
    (unless (bound-and-true-p vertico--input)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

  (defun corfu-move-to-minibuffer ()
    "Transfer the Corfu completion to the minibuffer."
    (interactive)
    (let ((completion-extra-properties corfu--extra)
          completion-cycle-threshold completion-cycling)
      (apply #'consult-completion-in-region completion-in-region--data)))
  (define-key corfu-map (kbd "M-m") #'corfu-move-to-minibuffer)
#+end_src

** Eglot

#+begin_src emacs-lisp
  (require 'eglot)
  (require 'go-mode)
  (require 'racket-mode)
  (require 'rust-mode)

  (dolist (hook '(python-mode-hook
                  racket-mode-hook
                  go-mode-hook
                  rust-mode-hook
                  sh-mode-hook))
    (add-hook hook #'eglot-ensure))

  (define-key eglot-mode-map (kbd "C-c r") #'eglot-rename)
#+end_src

** Avy

#+begin_src emacs-lisp
  (require 'avy)
  (setq avy-timeout-seconds 0.25)
  (global-set-key (kbd "C-;") #'avy-goto-char-timer)
#+end_src

* Applications

** Org mode

#+begin_src emacs-lisp
  (require 'org)

  (add-hook 'org-mode-hook #'visual-line-mode)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)))

  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-startup-indented t)
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width '(640))
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-window-setup 'current-window)
  (setq org-capture-templates
        '(("a" "Task/Annotation" entry (file+headline "" "Tasks")
           "* TODO %?\n%u\n%a\n%i"
           :empty-lines 1)
          ("t" "Task" entry (file+headline "" "Tasks")
           "* TODO %?\n%u\n%i"
           :empty-lines 1)
          ("j" "Journal" entry (file+olp+datetree "journal.org")
           "* %?"
           :empty-lines 1
           :jump-to-captured t)))
  (setq org-todo-keywords '((sequence "TODO" "NOW" "DONE")))
  (setq org-todo-keyword-faces '(("NOW" . '(warning org-todo))))

  (defun sndb-sort-headings ()
    "Sorts the contents of all headings on the first level."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((p (point)))
        (while (not (= p
                       (progn (org-forward-heading-same-level 1)
                              (setq p (point)))))
          (org-sort-entries nil ?a)))))

  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
#+end_src

** Git interface

#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)

  (require 'magit)
  (setq magit-diff-refine-hunk 'all)
  (setq magit-repository-directories '(("~" . 3)))
  (add-to-list 'magit-repolist-columns '("Flag" 4 magit-repolist-column-flag (:right-align t)))
  (global-set-key (kbd "H-r") #'magit-list-repositories)

  (require 'magit-todos)
  (magit-todos-mode 1)

  (require 'diff-hl)
  (setq diff-hl-draw-borders nil)
  (global-diff-hl-mode 1)
  (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)
#+end_src

** Terminal emulator

#+begin_src emacs-lisp
  (require 'vterm)
  (global-set-key (kbd "C-c v") #'vterm-other-window)
#+end_src

** PDF reader

#+begin_src emacs-lisp
  (require 'pdf-tools)
  (setq pdf-info-restart-process-p t)
  (pdf-tools-install)
#+end_src

** EPUB reader

#+begin_src emacs-lisp
  (require 'nov)
  (setq nov-text-width fill-column)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

** Password manager

#+begin_src emacs-lisp
  (require 'epg)
  (setq epg-pinentry-mode 'loopback)

  (require 'password-store)

  (defun sndb-password-store-copy-login (entry)
    "Add login for ENTRY into the kill ring."
    (interactive (list (password-store--completing-read)))
    (password-store-copy-field entry "login"))

  (global-set-key (kbd "C-c p") #'password-store-copy)
  (global-set-key (kbd "C-c P") #'sndb-password-store-copy-login)
#+end_src

** Directory editor

#+begin_src emacs-lisp
  (require 'dired)
  (setq dired-kill-when-opening-new-dired-buffer t)
  (setq dired-dwim-target t)
  (setq dired-listing-switches "-lhvFA --group-directories-first --time-style=long-iso")
  (add-hook 'dired-mode-hook #'hl-line-mode)
#+end_src

** Emms

#+begin_src emacs-lisp
  (require 'emms-setup)
  (require 'emms-info-exiftool)
  (require 'emms-history)

  (emms-all)

  (setq emms-player-list '(emms-player-mpv))
  (setq emms-info-functions '(emms-info-exiftool))
  (setq emms-browser-covers #'emms-browser-cache-thumbnail-async)
  (setq emms-source-file-default-directory "~/music/")

  (emms-history-load)

  (global-set-key (kbd "<f5>") #'emms)
  (global-set-key (kbd "<f6>") #'emms-browser)
  (global-set-key (kbd "<XF86AudioPrev>") #'emms-previous)
  (global-set-key (kbd "<XF86AudioNext>") #'emms-next)
  (global-set-key (kbd "<XF86AudioPlay>") #'emms-pause)
  (global-set-key (kbd "<XF86AudioStop>") #'emms-stop)
#+end_src

** Elfeed

#+begin_src emacs-lisp
  (require 'elfeed)

  (setq sndb-feeds-file (locate-user-emacs-file "feeds.el"))
  (when (file-exists-p sndb-feeds-file)
    (load-file sndb-feeds-file))

  (setq elfeed-db-directory (concat user-emacs-directory "elfeed/"))
  (setq-default elfeed-search-filter "@2-weeks-ago +unread -spam ")

  (global-set-key (kbd "C-x w") #'elfeed)
#+end_src

** Mail

#+begin_src emacs-lisp
  (setq user-full-name "sndb")
  (setq user-mail-address "sndb@sndb.xyz")

  (require 'notmuch)
  (global-set-key (kbd "<XF86Mail>") #'notmuch)

  (require 'smtpmail)
  (setq smtpmail-smtp-server "smtp.mailbox.org")
  (setq smtpmail-smtp-service 587)
  (setq smtpmail-stream-type 'starttls)
  (setq send-mail-function 'smtpmail-send-it)
#+end_src
