#+title: GNU Emacs Configuration
#+author: sndb
#+email: sndb@sndb.xyz

* Basics

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t -*-
#+end_src

** Packages

*** MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
#+end_src

*** Package list

#+begin_src emacs-lisp
  (setq sndb-package-list
        '(;; completion
          avy
          consult
          corfu
          embark
          embark-consult
          marginalia
          orderless
          vertico
          wgrep

          ;; languages
          eglot
          go-mode
          racket-mode
          rust-mode

          ;; applications
          magit
          nov
          password-store
          pdf-tools
          vterm

          ;; miscellaneous
          circadian
          diff-hl
          modus-themes
          ))

  (defun sndb-install-packages ()
    "Install all the packages from `sndb-package-list'."
    (interactive)
    (package-refresh-contents)
    (dolist (package sndb-package-list)
      (unless (package-installed-p package)
        (package-install package))))
#+end_src

** Start server

#+begin_src emacs-lisp
  (server-start)
#+end_src

** Custom file

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** Recursion limits

#+begin_src emacs-lisp
  (setq max-specpdl-size (* 10 max-specpdl-size))
  (setq max-lisp-eval-depth (* 10 max-lisp-eval-depth))
#+end_src

* History

** Disable backups

#+begin_src emacs-lisp
  (setq create-lockfiles nil
        make-backup-files nil
        auto-save-default nil)
#+end_src

** Recently opened files

#+begin_src emacs-lisp
  (setq recentf-max-saved-items 256)
  (recentf-mode)
#+end_src

** Save last positions

#+begin_src emacs-lisp
  (setq save-place-limit 256)
  (save-place-mode)
#+end_src

** Window configuration history

#+begin_src emacs-lisp
  (winner-mode)
#+end_src

* Interface

** Indicators

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq use-short-answers t)
  (setq echo-keystrokes 0.25)
  (setq show-paren-delay 0.1)
  (setq display-time-day-and-date t)
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average nil)
  (setq mode-line-compact 'long)

  (show-paren-mode)
  (blink-cursor-mode 0)
  (display-time-mode 0)
  (line-number-mode)
  (column-number-mode)
  (size-indication-mode 0)

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'hl-line-mode)
#+end_src

** Windows and frame

#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
  (setq window-resize-pixelwise t)
  (setq window-combination-resize t)
  (setq frame-title-format
        '(buffer-file-name "%b - %f"
                           ("%b - " default-directory)))

  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
#+end_src

** Tabs

#+begin_src emacs-lisp
  (setq tab-bar-close-button-show nil)
  (setq tab-bar-new-button-show nil)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (setq text-scale-mode-step 1.1)

  (setq sndb-mono-font "Hack-10.5")
  (setq sndb-sans-font "Source Sans Pro-12")

  (set-face-attribute 'default nil :font sndb-mono-font)
  (set-face-attribute 'fixed-pitch nil :font sndb-mono-font)
  (set-face-attribute 'variable-pitch nil :font sndb-sans-font)
#+end_src

** Theme

#+begin_src emacs-lisp
  (require 'modus-themes)

  (setq modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-syntax '(yellow-comments)
        modus-themes-mixed-fonts t
        modus-themes-prompts '(background bold)
        modus-themes-mode-line '(accented)
        modus-themes-paren-match '(bold)
        modus-themes-region '(bg-only no-extend)
        modus-themes-org-blocks 'gray-background
        modus-themes-headings '((t . (overline background))))

  (modus-themes-load-themes)

  (require 'circadian)

  (setq calendar-latitude 55
        calendar-longitude 37)
  (setq circadian-themes '((:sunrise . modus-operandi)
                           (:sunset  . modus-vivendi)))

  (circadian-setup)
#+end_src

* Editing

** Automatic parens pairing

#+begin_src emacs-lisp
  (electric-pair-mode)
#+end_src

** Scrolling

#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position t)
  (setq scroll-conservatively 1)

  (defun sndb-half-screen () (/ (window-body-height) 2))

  (defun sndb-scroll-half-screen-up ()
    "Scroll half screen up."
    (interactive)
    (scroll-up (sndb-half-screen)))

  (defun sndb-scroll-half-screen-down ()
    "Scroll half screen down."
    (interactive)
    (scroll-down (sndb-half-screen)))

  (global-set-key (kbd "C-S-n") 'sndb-scroll-half-screen-up)
  (global-set-key (kbd "C-S-p") 'sndb-scroll-half-screen-down)
#+end_src

** Whitespaces and indentation

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
  (setq tab-always-indent 'complete)
  (setq tab-first-completion 'word-or-paren-or-punct)
  (setq-default indent-tabs-mode nil)

  (defun sndb-format-buffer ()
    "Apply `indent-region' to the whole buffer.
  If Eglot is active, format the buffer and organize imports."
    (interactive)
    (if eglot--managed-mode
        (progn
          (eglot-format)
          (eglot-code-action-organize-imports (point-min) (point-max)))
      (indent-region (point-min) (point-max)))
    (delete-trailing-whitespace))

  (global-set-key (kbd "M-SPC") 'cycle-spacing)
  (global-set-key (kbd "C-c w") 'whitespace-mode)
  (global-set-key (kbd "C-c W") 'delete-trailing-whitespace)
  (global-set-key (kbd "C-c f") 'sndb-format-buffer)
  (global-set-key (kbd "C-c t") 'indent-tabs-mode)
#+end_src

** Curly quotes

#+begin_src emacs-lisp
  (defun sndb-replace-untypable-characters ()
    "Replace the characters that are inconvenient to type."
    (interactive)
    (save-excursion
      (dolist (pair
               '(("‘" . "'")
                 ("’" . "'")
                 ("“" . "\"")
                 ("”" . "\"")
                 ("—" . " - ")))
        (replace-string (car pair) (cdr pair) nil (point-min) (point-max)))))
#+end_src

** C style

#+begin_src emacs-lisp
  (setq c-default-style "linux")
  (add-hook 'c-mode-common-hook 'indent-tabs-mode)
#+end_src

** Revert on file change

#+begin_src emacs-lisp
  (global-auto-revert-mode)
#+end_src

** Follow symlinks

#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

** Require final newline

#+begin_src emacs-lisp
  (setq-default require-final-newline t)
#+end_src

* Completion

** Ignore case

#+begin_src emacs-lisp
  (setq completion-ignore-case t)
  (setq read-buffer-completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
#+end_src

** Minibuffer history

#+begin_src emacs-lisp
  (setq history-length 1024)
  (savehist-mode)
#+end_src

** ElDoc

#+begin_src emacs-lisp
  (setq eldoc-echo-area-prefer-doc-buffer t)
  (setq eldoc-idle-delay 0.1)
#+end_src

** Vertico

#+begin_src emacs-lisp
  (require 'vertico)

  (setq vertico-cycle t)
  (setq vertico-count 20)

  (vertico-mode)
#+end_src

** Orderless

#+begin_src emacs-lisp
  (require 'orderless)

  (setq completion-styles '(orderless basic))
  (setq completion-category-overrides
        '((file (styles basic partial-completion))))
  (setq orderless-matching-styles
        '(orderless-flex orderless-regexp))
  (setq orderless-style-dispatchers
        '(sndb-orderless-literal-dispatcher
          sndb-orderless-initialism-dispatcher))

  (defun sndb-orderless-literal-dispatcher (pattern _index _total)
    "Match component as literal if it ends in =."
    (when (string-suffix-p "=" pattern)
      `(orderless-literal . ,(substring pattern 0 -1))))

  (defun sndb-orderless-initialism-dispatcher (pattern _index _total)
    "Match component as initialism if it ends in ,."
    (when (string-suffix-p "," pattern)
      `(orderless-initialism . ,(substring pattern 0 -1))))
#+end_src

** Marginalia

#+begin_src emacs-lisp
  (require 'marginalia)

  (marginalia-mode)

  (global-set-key (kbd "M-A") 'marginalia-cycle)
#+end_src

** Consult

#+begin_src emacs-lisp
  (require 'consult)

  (global-set-key [remap switch-to-buffer] 'consult-buffer)
  (global-set-key [remap switch-to-buffer-other-window] 'consult-buffer-other-window)
  (global-set-key [remap switch-to-buffer-other-frame] 'consult-buffer-other-frame)
  (global-set-key [remap goto-line] 'consult-goto-line)
  (global-set-key [remap yank-pop] 'consult-yank-pop)

  (global-set-key (kbd "M-s d") 'consult-find)
  (global-set-key (kbd "M-s D") 'consult-locate)
  (global-set-key (kbd "M-s l") 'consult-line)
  (global-set-key (kbd "M-s L") 'consult-line-multi)
  (global-set-key (kbd "M-s r") 'consult-ripgrep)

  (global-set-key (kbd "M-g i") 'consult-imenu)
  (global-set-key (kbd "M-g I") 'consult-imenu-multi)
  (global-set-key (kbd "M-g e") 'consult-compile-error)
  (global-set-key (kbd "M-g f") 'consult-flymake)
  (global-set-key (kbd "M-g o") 'consult-outline)
  (global-set-key (kbd "M-g m") 'consult-mark)
#+end_src

** Embark

#+begin_src emacs-lisp
  (require 'embark)

  (setq prefix-help-command #'embark-prefix-help-command)

  (global-set-key (kbd "C-.") 'embark-act)
  (global-set-key (kbd "M-.") 'embark-dwim)
  (global-set-key (kbd "C-h B") 'embark-bindings)

  (require 'embark-consult)

  (add-hook 'embark-collect-mode-hook 'consult-preview-at-point-mode)

  (require 'wgrep)
#+end_src

** Corfu

#+begin_src emacs-lisp
  (require 'corfu)

  (setq corfu-cycle t)

  (global-corfu-mode)

  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico is not active."
    (unless (bound-and-true-p vertico--input)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook 'corfu-enable-always-in-minibuffer 1)

  (defun corfu-move-to-minibuffer ()
    "Transfer the Corfu completion to the minibuffer."
    (interactive)
    (let ((completion-extra-properties corfu--extra)
          completion-cycle-threshold completion-cycling)
      (apply #'consult-completion-in-region completion-in-region--data)))
  (define-key corfu-map (kbd "M-m") 'corfu-move-to-minibuffer)
#+end_src

** Eglot

#+begin_src emacs-lisp
  (require 'eglot)
  (require 'go-mode)
  (require 'racket-mode)
  (require 'rust-mode)

  (dolist (hook '(python-mode-hook
                  racket-mode-hook
                  go-mode-hook
                  rust-mode-hook
                  sh-mode-hook))
    (add-hook hook 'eglot-ensure))

  (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
#+end_src

** Avy

#+begin_src emacs-lisp
  (require 'avy)

  (setq avy-timeout-seconds 0.25)

  (global-set-key (kbd "C-;") 'avy-goto-char-timer)
#+end_src

* Applications

** Org mode

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'visual-line-mode)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)))

  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-startup-indented t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-window-setup 'current-window)
  (setq org-capture-templates
        '(("t" "Task" entry (file+headline "" "Tasks")
           "* TODO %?\n%u\n%a\n%i"
           :empty-lines 1)
          ("j" "Journal" entry (file+olp+datetree "journal.org")
           "* %?"
           :empty-lines 1
           :jump-to-captured t)))

  (setq org-todo-keywords '((sequence "TODO" "NEXT" "IN PROGRESS" "DONE")))
  (setq org-todo-keyword-faces '(("IN PROGRESS" . '(warning org-todo))))

  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

** Git interface

#+begin_src emacs-lisp
  (require 'magit)

  (setq magit-diff-refine-hunk 'all)

  (require 'diff-hl)

  (global-diff-hl-mode)

  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
#+end_src

** Terminal emulator

#+begin_src emacs-lisp
  (require 'vterm)

  (global-set-key (kbd "C-c v") 'vterm-other-window)
#+end_src

** PDF reader

#+begin_src emacs-lisp
  (require 'pdf-tools)

  (setq pdf-info-restart-process-p t)

  (pdf-tools-install)
#+end_src

** EPUB reader

#+begin_src emacs-lisp
  (require 'nov)

  (setq nov-text-width fill-column)

  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

** Password manager

#+begin_src emacs-lisp
  (require 'epg)

  (setq epg-pinentry-mode 'loopback)

  (require 'password-store)

  (global-set-key (kbd "C-c p") 'password-store-copy)
#+end_src

** Directory editor

#+begin_src emacs-lisp
  (setq dired-kill-when-opening-new-dired-buffer t)
  (setq dired-listing-switches "-lhvFA --group-directories-first --time-style=long-iso")

  (add-hook 'dired-mode-hook 'hl-line-mode)
#+end_src
