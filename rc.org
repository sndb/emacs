#+title: Emacs Configuration
#+author: sndb

* Intro

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t -*-
#+end_src

* Packages

** MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
#+end_src

** Package List

#+begin_src emacs-lisp
  (setq sndb-package-list
        '(consult
          corfu
          embark
          embark-consult
          marginalia
          orderless
          vertico
          wgrep

          magit
          nov
          pdf-tools
          vterm

          eglot
          go-mode
          racket-mode
          rust-mode

          diff-hl
          olivetti

          modus-themes))

  (defun sndb-install-packages ()
    "Install all the packages from 'sndb-package-list'."
    (interactive)
    (package-refresh-contents)
    (dolist (package sndb-package-list)
      (unless (package-installed-p package)
        (package-install package))))
#+end_src

* Basics

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq use-short-answers t)
  (server-start)
#+end_src

* Files

** Custom

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** Temporary

#+begin_src emacs-lisp
  (setq create-lockfiles nil
        make-backup-files nil
        auto-save-default nil)
#+end_src

** Recently

#+begin_src emacs-lisp
  (setq recentf-max-saved-items 256)
  (recentf-mode)
#+end_src

** Save Place

#+begin_src emacs-lisp
  (setq save-place-limit 256)
  (save-place-mode)
#+end_src

** Auto Revert

#+begin_src emacs-lisp
  (global-auto-revert-mode)
#+end_src

* Visuals

** Indicators

#+begin_src emacs-lisp
  (setq echo-keystrokes 0.25)

  (setq display-time-day-and-date t)

  (display-time-mode)
  (line-number-mode)
  (column-number-mode)
  (size-indication-mode)

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'hl-line-mode)
#+end_src

** Frame

#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)

  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (setq sndb-mono-font "Iosevka-12")
  (setq sndb-sans-font "Iosevka Aile-12")

  (set-face-attribute 'default nil :font sndb-mono-font)
  (set-face-attribute 'fixed-pitch nil :font sndb-mono-font)
  (set-face-attribute 'variable-pitch nil :font sndb-sans-font)
#+end_src

** Theme

#+begin_src emacs-lisp
  (require 'modus-themes)

  (setq modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-syntax '(yellow-comments)
        modus-themes-mixed-fonts t
        modus-themes-prompts '(background bold)
        modus-themes-mode-line '(accented)
        modus-themes-paren-match '(bold)
        modus-themes-region '(bg-only no-extend)
        modus-themes-org-blocks 'gray-background
        modus-themes-headings '((t . (overline background))))

  (modus-themes-load-themes)

  (require 'circadian)

  (setq calendar-latitude 55
        calendar-longitude 37)

  (setq circadian-themes '((:sunrise . modus-operandi)
                           (:sunset  . modus-vivendi)))

  (circadian-setup)
#+end_src

* Editing

** Automatic Parens

#+begin_src emacs-lisp
  (electric-pair-mode)
#+end_src

** Scrolling

#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position t
        scroll-conservatively 1)

  (defun sndb-scroll-third-height-up ()
    "Scroll text up a third of the window height."
    (interactive)
    (scroll-up (/ (window-height) 3)))

  (defun sndb-scroll-third-height-down ()
    "Scroll text down a third of the window height."
    (interactive)
    (scroll-down (/ (window-height) 3)))

  (global-set-key (kbd "C-S-n") 'sndb-scroll-third-height-up)
  (global-set-key (kbd "C-S-p") 'sndb-scroll-third-height-down)
#+end_src

** Whitespaces

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
  (setq indent-tabs-mode nil)

  (global-set-key (kbd "C-c w w") 'delete-trailing-whitespace)
  (global-set-key (kbd "C-c w t") 'whitespace-mode)
  (global-set-key (kbd "C-c w f") 'fixup-whitespace)
  (global-set-key (kbd "C-c w i") 'sndb-indent-buffer)

  (defun sndb-indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))
#+end_src

* Org

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  (add-hook 'org-mode-hook 'visual-line-mode)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)))

  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-startup-indented t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-window-setup 'current-window)
  (setq org-capture-templates
        '(("t" "Task" entry (file+headline "" "Tasks")
           "* TODO %?\n%u\n%a\n%i"
           :empty-lines 1)
          ("j" "Journal" entry (file+olp+datetree "journal.org")
           "* %?"
           :empty-lines 1
           :jump-to-captured t)))

  (setq org-todo-keywords '((sequence "TODO" "NEXT" "IN PROGRESS" "DONE")))
  (setq org-todo-keyword-faces '(("IN PROGRESS" . '(warning org-todo))))
#+end_src

* Completion

** Minibuffer History

#+begin_src emacs-lisp
  (setq history-length 1024)
  (savehist-mode)
#+end_src

** Vertico

#+begin_src emacs-lisp
  (require 'vertico)

  (setq vertico-cycle t)
  (setq vertico-count 20)

  (vertico-mode)
#+end_src

** Orderless

#+begin_src emacs-lisp
  (require 'orderless)

  (setq completion-styles '(orderless basic))
  (setq completion-category-overrides
        '((file (styles basic partial-completion))))
  (setq orderless-matching-styles
        '(orderless-flex orderless-regexp))
  (setq orderless-style-dispatchers
        '(sndb-orderless-literal-dispatcher
          sndb-orderless-initialism-dispatcher))

  (defun sndb-orderless-literal-dispatcher (pattern _index _total)
    "Match component as literal if it ends in =."
    (when (string-suffix-p "=" pattern)
      `(orderless-literal . ,(substring pattern 0 -1))))

  (defun sndb-orderless-initialism-dispatcher (pattern _index _total)
    "Match component as initialism if it ends in ,."
    (when (string-suffix-p "," pattern)
      `(orderless-initialism . ,(substring pattern 0 -1))))
#+end_src

** Marginalia

#+begin_src emacs-lisp
  (require 'marginalia)

  (global-set-key (kbd "M-A") 'marginalia-cycle)

  (marginalia-mode)
#+end_src

** Consult

#+begin_src emacs-lisp
  (require 'consult)

  (global-set-key (kbd "C-c o b") 'consult-buffer)
  (global-set-key (kbd "C-c o 4 b") 'consult-buffer-other-window)
  (global-set-key (kbd "C-c o 5 b") 'consult-buffer-other-frame)
  (global-set-key (kbd "C-c o f") 'consult-find)
  (global-set-key (kbd "C-c o F") 'consult-locate)
  (global-set-key (kbd "C-c o l") 'consult-line)
  (global-set-key (kbd "C-c o L") 'consult-line-multi)
  (global-set-key (kbd "C-c o i") 'consult-imenu)
  (global-set-key (kbd "C-c o I") 'consult-imenu-multi)
  (global-set-key (kbd "C-c o y") 'consult-yank-pop)
  (global-set-key (kbd "C-c o e") 'consult-compile-error)
  (global-set-key (kbd "C-c o d") 'consult-flymake)
  (global-set-key (kbd "C-c o o") 'consult-outline)
  (global-set-key (kbd "C-c o r") 'consult-ripgrep)
#+end_src

** Embark

#+begin_src emacs-lisp
  (require 'embark)

  (global-set-key (kbd "C-.") 'embark-act)
  (global-set-key (kbd "M-.") 'embark-dwim)
  (global-set-key (kbd "C-h B") 'embark-bindings)

  (setq prefix-help-command #'embark-prefix-help-command)

  (require 'embark-consult)

  (add-hook 'embark-collect-mode-hook 'consult-preview-at-point-mode)

  (require 'wgrep)
#+end_src

** Corfu

#+begin_src emacs-lisp
  (require 'corfu)

  (setq corfu-cycle t)

  (global-corfu-mode)

  (defun corfu-enable-always-in-minibuffer ()
    (unless (bound-and-true-p vertico--input)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook 'corfu-enable-always-in-minibuffer 1)
#+end_src

** Eglot

#+begin_src emacs-lisp
  (require 'eglot)

  (dolist (hook '(python-mode-hook
                  racket-mode-hook
                  go-mode-hook
                  rust-mode-hook))
    (add-hook hook 'eglot-ensure))
#+end_src

* Git

#+begin_src emacs-lisp
  (require 'magit)

  (setq magit-diff-refine-hunk 'all)

  (require 'diff-hl)

  (global-diff-hl-mode)
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
#+end_src

* Terminal

#+begin_src emacs-lisp
  (require 'vterm)
#+end_src

* PDF

#+begin_src emacs-lisp
  (require 'pdf-tools)

  (pdf-tools-install)
#+end_src

* Epub

#+begin_src emacs-lisp
  (require 'nov)

  (setq nov-text-width fill-column)

  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

* Dired

#+begin_src emacs-lisp
  (setq dired-kill-when-opening-new-dired-buffer t)
  (setq dired-listing-switches "-lhvFA --group-directories-first")
  (add-hook 'dired-mode-hook 'hl-line-mode)
#+end_src
