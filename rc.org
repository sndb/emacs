#+title: Emacs Configuration
#+author: sndb

* Intro

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t -*-
#+end_src

* Packages

** MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))

  (setq sndb-package-list
        '(vertico
          orderless
          marginalia
          embark
          consult
          embark-consult
          wgrep
          corfu

          magit
          vterm
          nov
          pdf-tools

          eglot
          racket-mode
          go-mode
          rust-mode

          visual-fill-column
          diff-hl))

  (defun sndb-install-packages ()
    "Install all the packages from 'sndb-package-list'."
    (interactive)
    (package-refresh-contents)
    (dolist (package sndb-package-list)
      (unless (package-installed-p package)
        (package-install package))))
#+end_src

** use-package

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* General

** Basic

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq use-short-answers t)
  (setq echo-keystrokes 0.25)
#+end_src

** Server

#+begin_src emacs-lisp
  (server-start)
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c w w") 'delete-trailing-whitespace)
  (global-set-key (kbd "C-c w t") 'whitespace-mode)
  (global-set-key (kbd "C-c w f") 'fixup-whitespace)
#+end_src

* Files

** Custom file

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file)
#+end_src

** Temporary files

#+begin_src emacs-lisp
  (setq create-lockfiles nil
        make-backup-files nil
        auto-save-default nil)
#+end_src

** Recently edited files

#+begin_src emacs-lisp
  (setq recentf-max-saved-items 256)
  (recentf-mode)
#+end_src

** Save place

#+begin_src emacs-lisp
  (setq save-place-limit 256)
  (save-place-mode)
#+end_src

** Auto revert

#+begin_src emacs-lisp
  (global-auto-revert-mode)
#+end_src

* Visuals

** Basics

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'hl-line-mode)

  (global-diff-hl-mode)
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)

  (use-package visual-fill-column
    :init
    (add-hook 'visual-line-mode-hook 'visual-fill-column-mode))
#+end_src

** Scrolling

#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position t
        scroll-conservatively 1)
#+end_src

** Modeline

#+begin_src emacs-lisp
  (setq display-time-day-and-date t)

  (display-time-mode)
  (line-number-mode)
  (column-number-mode)
  (size-indication-mode)
#+end_src

** Frame

#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)

  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (setq sndb-mono-font "Iosevka-12")
  (setq sndb-sans-font "Iosevka Aile-12")

  (set-face-attribute 'default nil :font sndb-mono-font)
  (set-face-attribute 'fixed-pitch nil :font sndb-mono-font)
  (set-face-attribute 'variable-pitch nil :font sndb-sans-font)
#+end_src

** Theme

#+begin_src emacs-lisp
  (defun sndb-part-of-day ()
    "Compute the current part of the day.
  Return 'morning, 'day, 'evening, or 'night."
    (let ((hour (decoded-time-hour (decode-time))))
      (cond
       ((< hour 6) 'night)
       ((< hour 12) 'morning)
       ((< hour 18) 'day)
       ((< hour 24) 'evening))))

  (defun sndb-load-theme ()
    "Load a theme corresponding to the current part of the day.
  Select the light theme in the morning or afternoon, the dark theme in
  the evening or at night."
    (interactive)
    (let ((part (sndb-part-of-day)))
      (if (or (eq part 'morning) (eq part 'day))
          (modus-themes-load-operandi)
        (modus-themes-load-vivendi))))

  (use-package modus-themes
    :init
    (setq modus-themes-bold-constructs t
          modus-themes-italic-constructs t
          modus-themes-syntax '(yellow-comments)
          modus-themes-mixed-fonts t
          modus-themes-prompts '(background bold)
          modus-themes-mode-line '(accented)
          modus-themes-paren-match '(bold)
          modus-themes-region '(bg-only no-extend)
          modus-themes-org-blocks 'tinted-background
          modus-themes-headings '((t . (overline background))))
    (modus-themes-load-themes)
    :config
    (sndb-load-theme)
    :bind ("<f5>" . modus-themes-toggle))
#+end_src

* Keyboard

#+begin_src emacs-lisp
  (electric-pair-mode)

  (setq sentence-end-double-space nil)
  (setq indent-tabs-mode nil)

  (defun sndb-scroll-third-height-up ()
    "Scroll text up a third of the window height."
    (interactive)
    (scroll-up (/ (window-height) 3)))

  (defun sndb-scroll-third-height-down ()
    "Scroll text down a third of the window height."
    (interactive)
    (scroll-down (/ (window-height) 3)))

  (global-set-key (kbd "C-S-n") 'sndb-scroll-third-height-up)
  (global-set-key (kbd "C-S-p") 'sndb-scroll-third-height-down)
#+end_src

* Org

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  (add-hook 'org-mode-hook 'visual-line-mode)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)))

  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-startup-indented t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-window-setup 'other-window)
  (setq org-capture-templates
        '(("t" "Task" entry (file+headline "" "Tasks")
           "* TODO %?\n%u\n%a\n%i"
           :empty-lines 1)
          ("j" "Journal" entry (file+olp+datetree "journal.org")
           "* %?"
           :empty-lines 1
           :jump-to-captured t)))
#+end_src

* Completion

#+begin_src emacs-lisp
  (setq history-length 1024)
  (savehist-mode)

  (use-package vertico
    :custom
    (vertico-cycle t)
    (vertico-count 20)
    :init
    (vertico-mode))

  (use-package orderless
    :custom
    (orderless-matching-styles '(orderless-flex orderless-regexp))
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package marginalia
    :bind
    (:map minibuffer-local-map
          ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

  (use-package embark
    :bind
    (("C-." . embark-act)
     ("M-." . embark-dwim)
     ("C-h B" . embark-bindings))
    :init
    (setq prefix-help-command #'embark-prefix-help-command))

  (use-package consult
    :bind
    (("C-c o b" . consult-buffer)
     ("C-c o 4 b" . consult-buffer-other-window)
     ("C-c o 5 b" . consult-buffer-other-frame)
     ("C-c o f" . consult-find)
     ("C-c o F" . consult-locate)
     ("C-c o l" . consult-line)
     ("C-c o L" . consult-line-multi)
     ("C-c o i" . consult-imenu)
     ("C-c o I" . consult-imenu-multi)
     ("C-c o y" . consult-yank-pop)
     ("C-c o e" . consult-compile-error)
     ("C-c o d" . consult-flymake)
     ("C-c o o" . consult-outline)
     ("C-c o r" . consult-ripgrep)))

  (use-package embark-consult
    :after (embark consult)
    :demand t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (use-package wgrep)

  (use-package corfu
    :custom
    (corfu-cycle t)
    :init
    (global-corfu-mode))

  (defun corfu-enable-always-in-minibuffer ()
    (unless (bound-and-true-p vertico--input)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook 'corfu-enable-always-in-minibuffer 1)

  (dolist (hook '(python-mode-hook
                  racket-mode-hook
                  go-mode-hook
                  rust-mode-hook))
    (add-hook hook 'eglot-ensure))
#+end_src

* Applications

** Magit

#+begin_src emacs-lisp
  (setq magit-diff-refine-hunk 'all)
#+end_src

** Terminal

#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** Readers

*** PDF

#+begin_src emacs-lisp
  (use-package pdf-tools
    :init
    (pdf-tools-install))
#+end_src

*** Epub

#+begin_src emacs-lisp
  (use-package nov
    :custom
    (nov-text-width 80)
    :init
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src
