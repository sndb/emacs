#+title: Emacs Configuration
#+author: sndb

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

#+end_src

* Packages

** MELPA

#+begin_src emacs-lisp

  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))

#+end_src

** use-package

#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Files

#+begin_src emacs-lisp

  (setq custom-file "~/.config/emacs/custom.el")
  (load custom-file)

#+end_src

* General

#+begin_src emacs-lisp

  (setq initial-major-mode 'org-mode
        frame-resize-pixelwise t
        sentence-end-double-space nil
        scroll-conservatively 101
        indent-tabs-mode nil)

#+end_src

** Review later

#+begin_src emacs-lisp

  ;(server-start)
  ;(recentf-mode t)
  ;(fset 'yes-or-no-p 'y-or-n-p)
  ;(setq initial-scratch-message "")
  ;(setq split-width-threshold 80)

#+end_src

* Disable temporary files

#+begin_src emacs-lisp

  (setq create-lockfiles nil
        make-backup-files nil
        auto-save-default nil)

#+end_src

* Visuals

** Basics

#+begin_src emacs-lisp

  (blink-cursor-mode 0)
  (global-display-line-numbers-mode)
  (global-hl-line-mode)
  (show-paren-mode)

  (setq-default truncate-lines t)
  (setq-default fill-column 80)
  (use-package visual-fill-column)

  (use-package centered-cursor-mode
    :config
    (global-centered-cursor-mode))

#+end_src

** Modeline

#+begin_src emacs-lisp

  (setq display-time-default-load-average nil)
  (line-number-mode)
  (column-number-mode)
  (size-indication-mode)

#+end_src

** Disable GUI interface

#+begin_src emacs-lisp

  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)

#+end_src

** Fonts

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :family "JetBrains Mono" :height 110)
  (set-face-attribute 'fixed-pitch nil :family "JetBrains Mono" :height 1.0)
  (set-face-attribute 'variable-pitch nil :family "Liberation Serif" :height 160)

#+end_src

** Theme

#+begin_src emacs-lisp

  (use-package modus-themes
    :init
    (setq modus-themes-region '(bg-only no-extend)
          modus-themes-syntax '(yellow-comments)
          modus-themes-hl-line '(accented)
          modus-themes-italic-constructs t
          modus-themes-mode-line '(accented borderless)
          modus-themes-headings '((t . (rainbow))))
    (modus-themes-load-themes)
    :config
    (modus-themes-load-operandi)
    :bind ("<f5>" . modus-themes-toggle))

#+end_src

** Startup

#+begin_src emacs-lisp

  (use-package dashboard
    :config
    (setq dashboard-center-content t
          dashboard-show-shortcuts nil)
    (dashboard-setup-startup-hook))

#+end_src

* Keyboard

#+begin_src emacs-lisp

  (use-package which-key
    :init
    (setq which-key-idle-delay 0.25)
    :config
    (which-key-mode))

#+end_src

** Evil

#+begin_src emacs-lisp

  (use-package undo-fu)

  (use-package evil
    :init
    (setq evil-want-keybinding nil
          evil-undo-system 'undo-fu)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list
          (remove 'org evil-collection-mode-list))
    (evil-collection-init))

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

#+end_src

* Org

#+begin_src emacs-lisp

  (use-package org
    :pin gnu
    :hook (org-mode . org-indent-mode)
    :hook (org-mode . visual-line-mode)
    :hook (org-mode . visual-fill-column-mode))

  (use-package evil-org
    :after org
    :hook (org-mode . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)))

  (setq org-confirm-babel-evaluate nil)

#+end_src

* Completion

#+begin_src emacs-lisp

  (use-package vertico
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :init
    (marginalia-mode))

#+end_src

* Applications

** Terminal

#+begin_src emacs-lisp

  (use-package vterm)

#+end_src

** Readers

*** PDF

#+begin_src emacs-lisp

  (use-package pdf-tools
    :init
    (pdf-tools-install))

#+end_src

*** Epub

#+begin_src emacs-lisp

  (use-package nov
    :init
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))

#+end_src
